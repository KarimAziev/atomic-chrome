#+OPTIONS: ^:nil tags:nil num:nil

* About

[[./images/icon.png]]


This fork of =atomic-chrome.el= introduces several enhancements over the original package, specifically designed to facilitate integration with the [[https://github.com/KarimAziev/chrome-emacs][chrome-emacs]] browser extension.

While the original =atomic-chrome.el= package is compatible with the extension, not all features introduced in this fork are available in the original. This includes the enhanced text update payload for accurate cursor positioning and improved file extension handling.

The [[https://github.com/KarimAziev/chrome-emacs][chrome-emacs]] extension itself was inspired by the need for a more efficient live-coding experience during online interviews. Unlike other solutions, it focuses not only on editing text areas but also on providing a seamless live-code experience in online editors.

** Online Editors Support

Chrome Emacs works with several widely-used online editors, including:

- ☒ [[https://codepen.io/][codepen.io]]
- ☒ [[https://stackblitz.com/][stackblitz.com]]
- ☒ [[https://jsfiddle.net/][jsfiddle.net]]
- ☒ [[https://leetcode.com/][leetcode.com]]
- ☒ [[https://www.hackerrank.com/][hackerrank.com]]
- ☒ [[https://repl.it/][repl.it]]
- ☒ [[https://glitch.com/][glitch.com]]
- ☒ [[https://plnkr.co/][plnkr.co]]
- ☐ [[https://codesandbox.io/][codesandbox.io]] (Currently unsupported due to a lack of Monaco API exposure).

#+CAPTION: Demo
[[./images/chrome-emacs.gif][./images/chrome-emacs.gif]]



[[./images/screencast.gif]]


* Table of Contents                                       :TOC_2_gh:QUOTE:
#+BEGIN_QUOTE
- [[#about][About]]
  - [[#online-editors-support][Online Editors Support]]
- [[#requirements][Requirements]]
- [[#installation][Installation]]
  - [[#install-chrome-extension][Install Chrome extension]]
  - [[#with-use-package-and-straightel][With use-package and straight.el]]
  - [[#manual-installation][Manual installation]]
- [[#usage][Usage]]
  - [[#how-to-bind-a-shortcut][How to Bind a Shortcut?]]
- [[#customization][Customization]]
#+END_QUOTE

* Requirements

| Name         |                 Version |
|--------------+-------------------------|
| Emacs        |                    24.4 |
| ~let-alist~  |                   1.0.6 |
| ~websocket~  |                    1.13 |
| [[https://github.com/KarimAziev/chrome-emacs][chrome-emacs]] | Google Chrome extension |


* Installation

** Install Chrome extension
Install the [[https://chromewebstore.google.com/detail/chrome-emacs/dabdpcafiblbndpoadckibiaojbdnpjg][Chrome extension]].

** With use-package and straight.el
#+begin_src elisp :eval no
(use-package atomic-chrome
  :demand t
  :straight (atomic-chrome
             :repo "KarimAziev/atomic-chrome"
             :type git
             :host github)
  :commands (atomic-chrome-start-server)
  :config (atomic-chrome-start-server))
#+end_src

** Manual installation

Download the source code and put it wherever you like, e.g. into =~/.emacs.d/atomic-chrome/=

#+begin_src shell :eval no
git clone https://github.com/KarimAziev/atomic-chrome.git ~/.emacs.d/atomic-chrome/
#+end_src

Add the downloaded directory to the load path:

#+begin_src elisp :eval no
(add-to-list 'load-path "~/.emacs.d/atomic-chrome/")
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src

* Usage

Ensure that Emacs is running with the [[https://github.com/KarimAziev/atomic-chrome][atomic-chrome fork]] (or [[https://github.com/alpha22jp/atomic-chrome][original atomic-chrome]]) loaded and the server is running (=M-x atomic-chrome-start-server=).

1. Focus on or select from detected editable text areas, text editors, or contenteditable elements in Chrome.

#+CAPTION: Hints
[[./images/hints.png][./images/hints.png]]

2. Activate Chrome Emacs. This can typically be done by clicking on the extension's icon or using a keyboard shortcut.

The text will now open in an Emacs buffer, ready for you to edit.

** How to Bind a Shortcut?

#+CAPTION: Shortcuts
[[./images/shortcuts.png][./images/shortcuts.png]]

1. Navigate to =chrome://extensions=.
2. Scroll down and click on =Keyboard shortcuts= at the bottom of the page.
3. Assign a shortcut for activating Chrome Emacs. There are two available commands:

- *Activate the extension* - default action, edit focused area. If there are no focused are, try to detect them from visible part of the page.
- *Select and edit element* - Show key to press near editable elements to focus and start editing. To cancel, press either =ESC= or =Ctrl-g=.


* Customization

*** Set auto-update mode

Atomic Chrome for Emacs automatically reflects modifications to the browser by default as described above, but you can disable it by setting the variable below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-enable-auto-update nil)
#+END_SRC

In this case, you can apply the modifications to the browser with C-c C-s

*** Set Fallback Major Mode for Editing Buffer

The default major mode of an editing buffer is set automatically if it can be determined from the file extension or URL extension. If not, it will fall back to the mode specified in the custom variable =atomic-chrome-default-major-mode=. 
You can change the major mode manually. If you want to use a different major mode as the default, set =atomic-chrome-default-major-mode= as shown below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-default-major-mode 'markdown-mode)
#+END_SRC

Additionally, you can use =atomic-chrome-url-major-mode-alist= to choose the major mode for a specific website based on the page URL as shown below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-url-major-mode-alist
        '(("github\\.com" . gfm-mode)
          ("redmine" . textile-mode)))
#+END_SRC

This is an association list of regular expressions and major mode functions. If the page URL matches one of the regular expressions, the corresponding major mode is selected.

#+begin_quote
[!NOTE]

Detected mode will take precedence over =atomic-chrome-url-major-mode-alist= and =atomic-chrome-default-major-mode= , which will be used only if the mode cannot be determined automatically.
#+end_quote

*** Select editing buffer style

You can select the style of opening the editing buffer by =atomic-chrome-buffer-open-style= like below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-buffer-open-style 'frame)
#+END_SRC

Available values are the followings.

- =full=: Open in the selected window.
- =split=: Open in the new window by splitting the selected window (default).
- =frame=: Create a new frame and window in it.

=frame= is available only when you are using Emacs on some window system.

If you select =frame=, you can also set the width and height of the frame with =atomic-chrome-buffer-frame-width= and =atomic-chrome-buffer-frame-height=. Their default values are =80= and =25=.
