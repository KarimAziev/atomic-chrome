#+OPTIONS: ^:nil tags:nil num:nil

* About

[[./images/icon.png]]


This fork of =atomic-chrome.el= introduces several fixes and enhancements over the original package, specifically designed to facilitate integration with the [[https://github.com/KarimAziev/chrome-emacs][chrome-emacs]] browser extension.

While the original =atomic-chrome.el= package is compatible with the extension, not all features introduced in this fork are available in the original.

** Differences between the original and forked package

- Handling large payloads, whereas the original package does not handle incomplete frames.
- Cursor and scroll synchronization. The [[https://github.com/KarimAziev/chrome-emacs][chrome-emacs]] extension itself was inspired by the need for a more efficient live-coding experience during online interviews. Unlike other solutions, it focuses not only on editing text areas but also on providing a seamless live-code experience in online editors.
- This fork uses temporary files, while the original package doesn't write to them. The motivation behind this is that many language servers require interaction with files for features like code linting and autocompletion.
- Many online editors may contain areas with different programming languages even on a single page. The original package sets the major mode based on user configuration, which allows only one mode per website, while this fork allows setting major modes based on file extensions, extracted directly from the editor instance.
- The original package allows customization of only two parameters for frame configuration: width and height. In contrast, this fork allows customization of every parameter for frame configuration. Furthermore, when the Atomic Chrome client includes a =rect= with pixel dimensions and positions, the =left= and =top= positions of the frame may be automatically calculated.


** Online Editors Support

Chrome Emacs works with several widely-used online editors, including:

- ☒ [[https://codepen.io/][codepen.io]]
- ☒ [[https://stackblitz.com/][stackblitz.com]]
- ☒ [[https://jsfiddle.net/][jsfiddle.net]]
- ☒ [[https://leetcode.com/][leetcode.com]]
- ☒ [[https://www.hackerrank.com/][hackerrank.com]]
- ☒ [[https://repl.it/][repl.it]]
- ☒ [[https://glitch.com/][glitch.com]]
- ☒ [[https://plnkr.co/][plnkr.co]]
- ☐ [[https://codesandbox.io/][codesandbox.io]] (Currently unsupported due to a lack of Monaco API exposure).

#+CAPTION: Demo
[[./images/chrome-emacs.gif][./images/chrome-emacs.gif]]



[[./images/screencast.gif]]


* Table of Contents                                       :TOC_2_gh:QUOTE:
#+BEGIN_QUOTE
- [[#about][About]]
  - [[#differences-between-the-original-and-forked-package][Differences between the original and forked package]]
  - [[#online-editors-support][Online Editors Support]]
- [[#requirements][Requirements]]
- [[#installation][Installation]]
  - [[#install-chrome-extension][Install Chrome extension]]
  - [[#with-use-package-and-straightel][With use-package and straight.el]]
  - [[#manual-installation][Manual installation]]
- [[#usage][Usage]]
  - [[#how-to-bind-a-shortcut][How to Bind a Shortcut?]]
- [[#customization][Customization]]
#+END_QUOTE

* Requirements

| Name         |                 Version |
|--------------+-------------------------|
| Emacs        |                    24.4 |
| ~let-alist~  |                   1.0.6 |
| ~websocket~  |                    1.13 |
| [[https://github.com/KarimAziev/chrome-emacs][chrome-emacs]] | Google Chrome extension |


* Installation

** Install Chrome extension
Install the [[https://chromewebstore.google.com/detail/chrome-emacs/dabdpcafiblbndpoadckibiaojbdnpjg][Chrome extension]].

** With use-package and straight.el
#+begin_src elisp :eval no
(use-package atomic-chrome
  :demand t
  :straight (atomic-chrome
             :repo "KarimAziev/atomic-chrome"
             :type git
             :host github)
  :commands (atomic-chrome-start-server)
  :config (atomic-chrome-start-server))
#+end_src

** Manual installation

Download the source code and put it wherever you like, e.g. into =~/.emacs.d/atomic-chrome/=

#+begin_src shell :eval no
git clone https://github.com/KarimAziev/atomic-chrome.git ~/.emacs.d/atomic-chrome/
#+end_src

Add the downloaded directory to the load path:

#+begin_src elisp :eval no
(add-to-list 'load-path "~/.emacs.d/atomic-chrome/")
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src

* Usage

Ensure that Emacs is running with the [[https://github.com/KarimAziev/atomic-chrome][atomic-chrome fork]] (or [[https://github.com/alpha22jp/atomic-chrome][original atomic-chrome]]) loaded and the server is running (=M-x atomic-chrome-start-server=).

1. Focus on or select from detected editable text areas, text editors, or contenteditable elements in Chrome.

2. Activate Chrome Emacs. This can typically be done by clicking on the extension's icon or using a keyboard shortcut.

#+CAPTION: Hints
[[./images/hints.png][./images/hints.png]]

The text will now open in an Emacs buffer, ready for you to edit.


** How to Bind a Shortcut?

#+CAPTION: Shortcuts
[[./images/shortcuts.png][./images/shortcuts.png]]

1. Navigate to =chrome://extensions=.
2. Scroll down and click on =Keyboard shortcuts= at the bottom of the page.
3. Assign a shortcut for activating Chrome Emacs. There are two available commands:

- *Activate the extension* - default action, edit focused area. If there are no focused are, try to detect them from visible part of the page.
- *Select and edit element* - Show key to press near editable elements to focus and start editing. To cancel, press either =ESC= or =Ctrl-g=.


* Customization

*** Configuring Auto-Removal of Files After Editing

The custom variable =atomic-chrome-auto-remove-file= determines whether the command =atomic-chrome-close-current-buffer= should also remove the file.

If it is a function, it will be invoked with no arguments and should return non-nil if the file is to be removed.

*** Configuring or Disabling Position and Selection Synchronization

The custom variable =atomic-chrome-max-text-size-for-position-sync= specifies the maximum size of text (in characters) for enabling cursor position and selection synchronization while editing. The default value is 300,000, which should suffice for most editing tasks.

To completely disable the synchronization, set the value to 0.


*** Set Auto-Update Mode

Atomic Chrome for Emacs automatically reflects modifications to the browser by default as described above, but you can disable it by setting the variable below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-enable-auto-update nil)
#+END_SRC

In this case, you can apply the modifications to the browser with C-c C-s

*** Set Fallback Major Mode for Editing Buffer

The default major mode of an editing buffer is set automatically if it can be determined from the file extension or URL extension. If not, it will fall back to the mode specified in the custom variable =atomic-chrome-default-major-mode=. 
You can change the major mode manually. If you want to use a different major mode as the default, set =atomic-chrome-default-major-mode= as shown below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-default-major-mode 'markdown-mode)
#+END_SRC

Additionally, you can use =atomic-chrome-url-major-mode-alist= to choose the major mode for a specific website based on the page URL as shown below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-url-major-mode-alist
        '(("github\\.com" . gfm-mode)
          ("redmine" . textile-mode)))
#+END_SRC

This is an association list of regular expressions and major mode functions. If the page URL matches one of the regular expressions, the corresponding major mode is selected.

#+begin_quote
[!NOTE]

Detected mode will take precedence over =atomic-chrome-url-major-mode-alist= and =atomic-chrome-default-major-mode= , which will be used only if the mode cannot be determined automatically.
#+end_quote

You can select the style for opening the editing buffer with `atomic-chrome-buffer-open-style` as shown below.

#+BEGIN_SRC emacs-lisp
  (setq atomic-chrome-buffer-open-style 'frame)
#+END_SRC

The available values are as follows:

- =full=: Opens in the selected window.
- =split=: Opens in a new window by splitting the selected window (default).
- =frame=: Creates a new frame and a window within it.

The =frame= option is available only when using Emacs on a window system.

If you select =frame=, you can set the width and height of the frame with =atomic-chrome-buffer-frame-width= and =atomic-chrome-buffer-frame-height=, and the rest of the frame parameters can be customized with =atomic-chrome-frame-parameters=.

#+begin_quote
[!TIP]

When the Atomic Chrome client includes a =rect= with pixel dimensions and positions, the =left= and =top= positions of the frame may be automatically calculated and adjusted to align with a text area in a web browser. This automatic calculation is bypassed if =left= and =top= are explicitly specified, favoring the user-defined positions instead.
#+end_quote
